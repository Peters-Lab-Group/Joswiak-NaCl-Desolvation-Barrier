


label			begin

# do a clear command and then read in all data, resetup all groups, charges, etc.
clear
log				${log_filename}

units			real
dimension		3
boundary		p p p
newton			on
atom_style		full
bond_style		harmonic
angle_style		harmonic
improper_style	none
dihedral_style	none
pair_style		lj/cut/coul/long 10.0

# read in data file with everything, atom coordinates included
read_data		${input_file}				

# initialize all the groups 
group			water 			type 	3 4					# need for fix shake 
group			Na_crystal 		type 	1 
group 			Cl_crystal 		type 	2 
group 			Na_sol 			type 	5
group 			Cl_sol 			type 	6
group 			oxy 			type 	3
group 			hyd 			type 	4 

#####################################



variable		Tdamp equal 100					# damping parameter in fs 
timestep		${tstep}
thermo			${delta_tm_steps}
thermo_style 	custom ${thermo_output_lmp}


set				group Na_crystal charge +1.0
set				group Cl_crystal charge -1.0
set 			group Na_sol charge +1.0
set 			group Cl_sol charge -1.0 
set 			group oxy charge -0.8476
set				group hyd charge 0.4238

pair_coeff		1 1 0.35264 2.159 10.0		# Na - Na 
pair_coeff		1 2 0.06715 3.495 10.0		# Na - Cl
pair_coeff 		1 3 0.23417 2.663 10.0 		# Na - O
pair_coeff 		1 4 0.0 0.0 0.2 
pair_coeff		1 5 0.35264 2.159 10.0		# Na - Na  
pair_coeff 		1 6 0.06715 3.495 10.0		# Na - Cl

pair_coeff		2 2 0.01278 4.830 10.0    	# Cl - Cl
pair_coeff 		2 3 0.04457 3.998 10.0 		# Cl - O
pair_coeff 		2 4 0.0 0.0 0.2 
pair_coeff		2 5 0.06715 3.495 10.0		# Na - Cl
pair_coeff 		2 6 0.01278 4.830 10.0    	# Cl - Cl

pair_coeff 		3 3 0.15540 3.166 10.0		# O - O
pair_coeff		3 4 0.0 0.0 0.2  
pair_coeff		3 5 0.23417 2.663 10.0		# Na - O
pair_coeff 		3 6 0.04457 3.998 10.0		# Cl - O

pair_coeff		4 4 0.0 0.0 0.2 
pair_coeff		4 5 0.0 0.0 0.2  
pair_coeff 		4 6 0.0 0.0 0.2  

pair_coeff		5 5 0.35264 2.159 10.0		# Na - Na  
pair_coeff 		5 6 0.06715 3.495 10.0		# Na - Cl

pair_coeff 		6 6 0.01278 4.830 10.0    	# Cl - Cl


bond_coeff		1 1000.0 1.0      		# 1A bond length; arbitrary K b/c will use shake
angle_coeff		1 1000.0 109.47			# H--O--H angle; arbitrary K b/c will use shake
pair_modify		shift yes
kspace_style	pppm 1.0e-5
kspace_modify	fftbench no




reset_timestep	0
	
fix				3 water shake 0.0001 100 0 b 1 a 1
fix				1 all nve	
fix				2 all langevin ${temp} ${temp} ${Tdamp} ${seed_for_lang} zero yes 					# zero out drift from thermostatting
#compute			Cl_coord Cl_sol coord/atom 6.5 3
#variable		kink_rsq	equal	(1/3*(x[${g_s1_2}]+x[${g_s2_2}]+x[${g_s3_2}]+x[${g_s1_3}]+x[${g_s2_3}]+x[${g_s3_3}]-x[${g_s1_1}]-x[${g_s2_1}]-x[${g_s3_1}])-x[${kinkid}])^2+(1/3*(y[${g_s1_2}]+y[${g_s2_2}]+y[${g_s3_2}]+y[${g_s1_3}]+y[${g_s2_3}]+y[${g_s3_3}]-y[${g_s1_1}]-y[${g_s2_1}]-y[${g_s3_1}])-y[${kinkid}])^2+(1/3*(z[${g_s1_2}]+z[${g_s2_2}]+z[${g_s3_2}]+z[${g_s1_3}]+z[${g_s2_3}]+z[${g_s3_3}]-z[${g_s1_1}]-z[${g_s2_1}]-z[${g_s3_1}])-z[${kinkid}])^2
#variable		coordination	equal	c_Cl_coord[${kinkid}]
variable		length_traj	equal	step

#variable		kink_x	equal	1/3*(x[${g_s1_2}]+x[${g_s2_2}]+x[${g_s3_2}]+x[${g_s1_3}]+x[${g_s2_3}]+x[${g_s3_3}]-x[${g_s1_1}]-x[${g_s2_1}]-x[${g_s3_1}])
#variable		kink_y	equal	1/3*(y[${g_s1_2}]+y[${g_s2_2}]+y[${g_s3_2}]+y[${g_s1_3}]+y[${g_s2_3}]+y[${g_s3_3}]-y[${g_s1_1}]-y[${g_s2_1}]-y[${g_s3_1}])
#variable		kink_z	equal	1/3*(z[${g_s1_2}]+z[${g_s2_2}]+z[${g_s3_2}]+z[${g_s1_3}]+z[${g_s2_3}]+z[${g_s3_3}]-z[${g_s1_1}]-z[${g_s2_1}]-z[${g_s3_1}])

#region			kink_volume sphere ${kink_x} ${kink_y} ${kink_z} ${kink_radius}
#variable		oxy_kink	atom	grmask(oxy,kink_volume)
#compute			oxysum oxy reduce sum v_oxy_kink
#variable		n_oxy_kink	equal 	c_oxysum
variable		rsq_all_kink	atom	(1/3*(x[${g_s1_2}]+x[${g_s2_2}]+x[${g_s3_2}]+x[${g_s1_3}]+x[${g_s2_3}]+x[${g_s3_3}]-x[${g_s1_1}]-x[${g_s2_1}]-x[${g_s3_1}])-x)^2+(1/3*(y[${g_s1_2}]+y[${g_s2_2}]+y[${g_s3_2}]+y[${g_s1_3}]+y[${g_s2_3}]+y[${g_s3_3}]-y[${g_s1_1}]-y[${g_s2_1}]-y[${g_s3_1}])-y)^2+(1/3*(z[${g_s1_2}]+z[${g_s2_2}]+z[${g_s3_2}]+z[${g_s1_3}]+z[${g_s2_3}]+z[${g_s3_3}]-z[${g_s1_1}]-z[${g_s2_1}]-z[${g_s3_1}])-z)^2
variable		rsq_all_below	atom	(x-x[${below_id}])^2+(y-y[${below_id}])^2+(z-z[${below_id}])^2
#variable		rsq_behind		atom	(x-x[${behind_id}])^2+(y-y[${behind_id}])^2+(z-z[${behind_id}])^2


variable		idlist	atom id
compute			oxymin oxy reduce min v_idlist v_rsq_all_kink replace 1 2								# id of oxy closest to kink
compute			oxymin_below oxy reduce min v_idlist v_rsq_all_below replace 1 2						# id of oxy closest to ion below kink
#compute			crds_oxy oxy reduce min x y z v_rsq_all_kink replace 1 4 replace 2 4 replace 3 4		# coordinates of oxy closest to kink
variable		rsq_oxymin	equal	c_oxymin[2]						# r^2 oxy-kink
variable		atomid_oxykink 	equal	c_oxymin[1]					# oxy id closest to kink
variable		rsq_oxymin_below	equal	c_oxymin_below[2]		# r^2 oxy-ion below
variable		atomid_oxybelow		equal	c_oxymin_below[1]		# oxy id closest to ion below kink

## way to compute r^2 for closest oxy to kink to any other atom
#variable		oxy_behind_rsq		equal	(c_crds_oxy[1]-x[${behind_id}])^2+(c_crds_oxy[2]-y[${behind_id}])^2+(c_crds_oxy[3]-z[${behind_id}])^2	#c_behind_oxymin[1]
#variable		oxy_next_rsq		equal	(c_crds_oxy[1]-x[${next_id}])^2+(c_crds_oxy[2]-y[${next_id}])^2+(c_crds_oxy[3]-z[${next_id}])^2

variable		kink_rsq	equal	v_rsq_all_kink[${kinkid}]

# ${thermo_output_lmp} 
thermo_style 	custom ${thermo_output_lmp} step v_kink_rsq v_rsq_oxymin v_rsq_oxymin_below v_atomid_oxykink v_atomid_oxybelow



variable		hA		equal 	0
variable		hB		equal 	0

## scale velocities to desired temperature so no extra factors in detailed balance
## this has to be after fix shake
velocity		all scale ${temp}


## if a forward trajectory, get the potential new shooting point; but first check to make sure shooting point not in either basin
if "(${forw_done}==1) && (${back_done}==0)" then &
	"jump		SELF 	init_OP_check" &
else &
	"jump		SELF	next_poss_shoot"
	
	

label			init_OP_check
## check the OPs and make sure not starting in a basin
run		0
shell		echo   ${trajnumber} ${forw_back} ${kink_rsq}  ${rsq_oxymin} ${rsq_oxymin_below} ${atomid_oxykink} ${atomid_oxybelow} >> progression.txt

if "${kink_rsq}<=${A_bound_distsq}" then &
	"variable		hA	equal	1"
if "(${atomid_oxykink}==${atomid_oxybelow}) && (${rsq_oxymin}<=${B_bound_distsq_oxy}) && (${rsq_oxymin_below}<=${B_bound_distsq_oxy_below}) && (${kink_rsq}>=${B_bound_distsq})" then &
	"variable		hB	equal	1"
if "${hA}==1 || ${hB}==1" then &
	"jump			main.txt prep" &
else &
	"jump			SELF 	next_poss_shoot"
	
	
	
label			next_poss_shoot
dump			5 all xyz ${delta_t_from_shoot_n} ${trajname}_${trajnumber}_shoot_${forw_back}.xyz
run				${delta_t_from_shoot_n}
undump			5

shell		echo   ${trajnumber} ${forw_back} ${kink_rsq}   ${rsq_oxymin} ${rsq_oxymin_below} ${atomid_oxykink} ${atomid_oxybelow} >> progression.txt
jump			SELF flex_traj


## flexible length trajectory

label			flex_traj
reset_timestep	0
dump			5 all xyz ${delta_tm_steps} ${outxyz}




label			longer_traj
run				${delta_tm_steps}
## check the OPs
if "${kink_rsq}<=${A_bound_distsq}" then &
	"variable		hA	equal	1"
	
if "(${atomid_oxykink}==${atomid_oxybelow}) && (${rsq_oxymin}<=${B_bound_distsq_oxy}) && (${rsq_oxymin_below}<=${B_bound_distsq_oxy_below}) && (${kink_rsq}>=${B_bound_distsq})" then &
	"variable		hB	equal	1"
	
## print out some checks
shell		echo   ${trajnumber} ${forw_back} ${kink_rsq}   ${rsq_oxymin} ${rsq_oxymin_below} ${atomid_oxykink} ${atomid_oxybelow} >> progression.txt


## if in a well, stop the trajectory
if "(${hA}==1) && (${forw_done}==1) && (${back_done}==0)" then &
	"variable		hAA		equal	1" &
	"variable		forw_result		equal -1" &
	"variable		forw_steps		equal		${length_traj}" &
	"undump			5" &
	"unfix			1" &
	"unfix			2" &
	"unfix 			3" &
	"jump			main.txt 		traj_done" &
elif "(${hA}==1)" &
	"variable		hAA		equal	1" &
	"variable		back_result		equal -1" &
	"variable		back_steps		equal		${length_traj}" &
	"undump			5" &
	"unfix			1" &
	"unfix			2" &
	"unfix 			3" &
	"jump			main.txt 		traj_done" &
elif "(${hB}==1) && (${forw_done}==1) && (${back_done}==0)" &
	"variable		hBB		equal	1" &
	"variable		forw_result		equal 1" &
	"variable		forw_steps		equal		${length_traj}" &
	"undump			5" &
	"unfix			1" &
	"unfix			2" &
	"unfix 			3" &
	"jump			main.txt 		traj_done" &
elif "(${hB}==1)" &
	"variable		hBB		equal	1" &
	"variable		back_result		equal 1" &
	"variable		back_steps		equal		${length_traj}" &
	"undump			5" &
	"unfix			1" &
	"unfix			2" &
	"unfix 			3" &
	"jump			main.txt 		traj_done" &
else &
	"jump			SELF	longer_traj"
	








